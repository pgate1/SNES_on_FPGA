
%i "typecheck.h"

//#define Enable_CX4

#ifdef Enable_CX4
%i "Cx4/Cx4_core.h"
#endif

circuit cartridge
{
	input BA<8>, A<16>, Din<8>;
	output Dout<8>;

	reg_ws reset;

	reg_wr f_hl_ok;

	instrin init;
	input check_LH, check_A<5>, check_data<8>;
	instrin check(check_LH, check_A, check_data);
	typecheck romtype_L, romtype_H;
	input sw_romtype;

	instrin set_rom_type_8MB();
	reg_wr f_rom_type_8MB;
	reg_wr rom_type<8>;
	output bank_type<4>;
	instrself lowrom_bank_mirror;

	instrin sw_CX4_enable;
	instrself f_cx4;
#ifdef Enable_CX4
	Cx4_core cx4;
#endif

	instrin read;
	instrout read_rom, read_sram;
	output rom_adrs<23>; // 8BM対応
	input read_rom_data<8>, read_sram_data<8>;
	instrin read_ack;
	output ack;

	output save_ram_size<4>;
	sel save_ram_mask<18>;
	instrself map_sram;
	instrin write;
	instrout write_sram;
	output sram_adrs<18>;

	output halt_code<8>;
output dbg<8>;

	if(reset){
		reset := 0b0;
	}

#ifdef Enable_CX4
	halt_code = cx4.halt_code;
dbg = cx4.dbg;
#else
	halt_code = 0x00;
#endif

	instruct init par{
		romtype_L.init();
		romtype_H.init();
		f_hl_ok := 0b0;
		f_rom_type_8MB := 0b0;
	}

	instruct check par{
		if(check_LH==0b0) romtype_L.check(check_A, check_data);
		if(check_LH==0b1) romtype_H.check(check_A, check_data);
		if((check_LH==0b1) & (check_A==0b11111)){
			f_hl_ok := 0b1;
		}
	}

	if(f_rom_type_8MB){
		bank_type = 5;
	}
	else{
		sel psa<8>;
		psa = romtype_L.point - romtype_H.point;
		if(sw_romtype){ // 反転
			if(psa<7>) bank_type = romtype_L.BankType;
			else       bank_type = romtype_H.BankType;
		}
		else{ // 通常
			if(psa<7>) bank_type = romtype_H.BankType;
			else       bank_type = romtype_L.BankType;
		}
	}

	any{
		// LoROM
		(bank_type==0) |
		(bank_type==2) |
		(bank_type==3) : par{
			save_ram_size = romtype_L.SRAM_size;
			if((romtype_L.ROM_size!=12) & (romtype_L.ROM_size!=13)) lowrom_bank_mirror();
		}
		// HiROM
		(bank_type==1) |
		(bank_type==5) : par{
			save_ram_size = romtype_H.SRAM_size;
		}
	}

	if(f_hl_ok){
		if(bank_type==0){
			rom_type := romtype_L.ROM_type;
		}
		else{
			rom_type := romtype_H.ROM_type;
		}
		f_hl_ok := 0b0;
	}

	// for 8MB ROM
	instruct set_rom_type_8MB par{
		f_rom_type_8MB := 0b1;
	}

#ifdef Enable_CX4
	if(sw_CX4_enable & (rom_type==0xF3)) f_cx4();
#endif

	any{
		f_cx4 : par{
#ifdef Enable_CX4
			rom_adrs = cx4.rom_adrs;
#endif
		}
		else : any{
			(bank_type==0) | (bank_type==2) | (bank_type==3) : par{
				if(lowrom_bank_mirror){ // 2MB以下のLoROMを4MBにミラーリング
					rom_adrs = 0b00 || BA<5:0> || A<14:0>; // 0x3F_7FFF 64x32kB = 2048 kB
				}
				else{ // LowROM <22> -> SDRAM
					rom_adrs = 0b0 || BA<6:0> || A<14:0>; // 0x7F_7FFF 128x32kB = 4096 kB
				}
			}
			(bank_type==1) : par{ // HiROM <23>(<22>) -> SDRAM
				rom_adrs = 0b0 || BA<5:0> || A<15:0>; // 0x3F_FFFF  64x64kB = 4096 kB
			}
			(bank_type==5) : par{
				// 23 = 1 + 6 + 16
				rom_adrs = (^BA<7>) || BA<5:0> || A;
			}
		}
	}

#ifdef Enable_CX4
	cx4.BA = BA;
	cx4.A = A;
	cx4.Din = Din;
#endif

	switch(save_ram_size){
	case 0: save_ram_mask = 0b000000000000000000; // no save ram
	case 1: save_ram_mask = 0b000000011111111111; //   2KB
	case 2: save_ram_mask = 0b000000111111111111; //   4KB
	case 3: save_ram_mask = 0b000001111111111111; //   8KB
	case 4: save_ram_mask = 0b000011111111111111; //  16KB
	case 5: save_ram_mask = 0b000111111111111111; //  32KB
	case 6: save_ram_mask = 0b001111111111111111; //  64KB
	case 7: save_ram_mask = 0b011111111111111111; // 128KB
	default: save_ram_mask = -1;
	}

	any{
		((bank_type==0) | (bank_type==2) | (bank_type==3)) & (BA<7:3>==0b01110) & (A<15>==0b0) : par{ // $70-77 0111_0---
			map_sram();
			// sram20 32KB <15> x 8 bank 256KB
			sram_adrs = (BA<2:0> || A<14:0>) & save_ram_mask;
		}
		((bank_type==1) | (bank_type==5)) & (BA<6:4>==0b011) & (A<15:13>==0b011) : par{ // $6000-$7FFF 011-_----_----_----
			map_sram();
			// sram21 8KB <13> x 16 bank 128KB
			sram_adrs = (0b0 || BA<3:0> || A<12:0>) & save_ram_mask;
		}
	}

	instruct read par{
		if(map_sram){
			read_sram();
		}
		else{
#ifdef Enable_CX4
			if(f_cx4 & (cx4.halt_code==0)) cx4.read();
			else read_rom();
#else
			read_rom();
#endif
		}
	}

#ifdef Enable_CX4
	instruct cx4.rom_read_req par{
		read_rom();
	}

	cx4.rom_data = read_rom_data;
	cx4.rom_ack = read_ack;
#endif

	if(map_sram){
		if(save_ram_size!=0) Dout = read_sram_data;
		else Dout = 0xFF; // test
		ack = read_ack;
	}
	else{
		if(f_cx4){
#ifdef Enable_CX4
			Dout = cx4.Dout;
			ack = cx4.ack;
#endif
		}
		else{
			Dout = read_rom_data;
			ack = read_ack;
		}
	}

	instruct write par{
		if(map_sram){
			if(save_ram_size!=0){
				write_sram();
			}
		}
		else{
#ifdef Enable_CX4
			if(f_cx4 & (cx4.halt_code==0)) cx4.write();
#endif
		}
	//	通常ROMへのwrite禁止
	}

}


/*
	SNES on FPGA feat. DE0-CV
	Copyright (c) 2017 pgate1
*/

%i "../../../DE0-CV/chatmask.h"
%i "../../../DE0-CV/seg7_ctrl.h"
%i "../../../DE0-CV/sdram8_ctrl_50.h"
%i "../../../DE0/SDHCcard_ctrl_SDmode.h"
%i "../../../DE0/FAT32.h"
%i "../../../DE0-CV/keyboard_ctrl.h"
%i "../../../DE0-CV/vjtag_uart.h"

%i "../snes_core.h"
%i "../mem/ram_8x128k.h"
%i "../Display.h"
%i "VGA_ctrl.h"
%i "Dithering_5to4.h"
%i "../mem/ram_8x32k.h"
//%i "DDS_50to5369318.h"
%i "DDS_50to10738635.h"

%i "../apu/apu_core.h"
%i "../mem/ram_8x64k.h"
%i "DDS_50to1024000.h"
%i "dsdac16.h"

%i "../cartridge/cartridge.h"

circuit core
{
	input KEY<4>, SW<10>;
	chatmask kcmask_0, kcmask_1, kcmask_2, kcmask_3;
	sels btn[4];
	output LEDR<10>;
	seg7_ctrl seg7_0, seg7_1, seg7_2, seg7_3, seg7_4, seg7_5;
	output HEX0<7>, HEX1<7>, HEX2<7>, HEX3<7>, HEX4<7>, HEX5<7>;
	sel seg<24>;
//--------------------- SDRAM Interface --------------------
// 参考 bank<2> adrs<23> data<16>
	sdram8_ctrl_50 sdram;
	output SDRAM_CSn, SDRAM_WEn, SDRAM_DEn;
	output SDRAM_RASn, SDRAM_CASn;
	output SDRAM_BA<2>, SDRAM_ADDR<13>;
	output SDRAM_LDQM, SDRAM_UDQM;
	input  SDRAM_Dout<16>;
	output SDRAM_Din<16>;
//--------------------- SD_Card Interface ------------------
	SDHCcard_ctrl_SDmode sdcard;
	output SD_CLK;    // SD Card Clock
	output SD_CMD_en; // SD Card CMD Enable
	output SD_CMD;    // SD Card Command
	input  SD_RES;    // SD Card Response
	input  SD_DAT<4>; // SD Card Data
	FAT32 fat;
//--------------------- PS/2 -------------------------------
	input PS2_KBCLK, PS2_KBDAT;
	keyboard_ctrl kb;
//--------------------- VGA --------------------------------
	VGA_ctrl vga;
	output VGA_HS, VGA_VS;
	output VGA_R<4>, VGA_G<4>, VGA_B<4>;
	reg VGA_R_reg<4>, VGA_G_reg<4>, VGA_B_reg<4>;
	Display dis;
	Dithering_5to4 dither_R, dither_G, dither_B;
//--------------------- SOUND ------------------------------
	dsdac16 dac_L, dac_R;
	output Sound_Left, Sound_Right;
//----------------------------------------------------------

	reg_ws reset;

	reg pA<26>;
	reg_wr rom_read_ok;

	// SNES
	snes_core snes;
	ram_8x128k wram;
	DDS_50to10738635 dds_cpu;

	ram_8x32k vramA, vramB;
//	DDS_50to5369318 dds_ppu;
	instrself dds_ppu_run;

	// APU
	apu_core apu;
	ram_8x64k apu_wram;
	reg_wr spc_read_ok;
	DDS_50to1024000 dds_apu;

	cartridge cart;

	mem keys[256]; // 使用は127まで

	vjtag_uart vjtag;

	reg_wr checksum<8>;
	reg_wr dbg_reg<8>;

	instrself halt(h_code);
	sel h_code<8>;
	reg_wr h_code_reg<8>;

	stage_name snes_line { task do(); }
//	stage_name mod_apu_read_stg { task do(); }
//	stage_name mod_apu_write_stg { task do(); }
//	stage_name sdram_clean { task do(); }
	stage_name key2btn { task do(); }
	stage_name card2ram_rom { task do(); }
	stage_name tas_stg { task do(); }
	stage_name vjtag2ram_rom { task do(); }
	stage_name card2ram_spc { task do(); }
	stage_name vjtag2ram_spc { task do(); }
	stage_name mem_clean { task do(); }

	if(reset){
		generate card2ram_rom.do();
	//	generate sdram_clean.do();
		generate key2btn.do();
		reset := 0b0;
	}

	par(i=0;i<4;i++){
		kcmask[i].bin = KEY<i>; btn[i] = kcmask[i].bout;
	}

	if(spc_read_ok){
		HEX5 = -1;
		HEX4 = -1;
		HEX3 = apu.disp_freq_0;
		HEX2 = apu.disp_freq_1;
		HEX1 = apu.disp_freq_2;
		HEX0 = apu.disp_freq_3;
	}
	else{
		if(^rom_read_ok){
			sel typeLH<14>;
			switch(cart.bank_type){
				case 0: typeLH = 0b0111000_1011100; // Lo 0x1C5C
				case 1: typeLH = 0b1110110_0010000; // Hi 0x3B10
			}
			HEX5 = ^typeLH<13:7>;
			HEX4 = ^typeLH<6:0>;
		}
		else{
			HEX5 = seg7_5.con(seg<23:20>).oSEG;
			HEX4 = seg7_4.con(seg<19:16>).oSEG;
		}
		HEX3 = seg7_3.con(seg<15:12>).oSEG;
		HEX2 = seg7_2.con(seg<11: 8>).oSEG;
		HEX1 = seg7_1.con(seg< 7: 4>).oSEG;
		HEX0 = seg7_0.con(seg< 3: 0>).oSEG;
	}

	SDRAM_CSn = sdram.CSn;
	SDRAM_RASn = sdram.RASn;
	SDRAM_CASn = sdram.CASn;
	SDRAM_WEn = sdram.WEn;
	SDRAM_DEn = sdram.DEn;
	SDRAM_BA = sdram.BA;
	SDRAM_ADDR = sdram.A;
	SDRAM_LDQM = sdram.DQM<0>;
	SDRAM_UDQM = sdram.DQM<1>;
	SDRAM_Din = sdram.Din;
	sdram.Dout = SDRAM_Dout;
	sdram.auto_refresh = ^rom_read_ok;

	SD_CLK    = sdcard.CLK;
	SD_CMD_en = sdcard.CMD_en;
	SD_CMD    = sdcard.CMD;
	sdcard.RES = SD_RES;
	sdcard.DAT = SD_DAT;

	instruct fat.sread sdcard.read(fat.sadrs);
	fat.sack = sdcard.ack;
	fat.sdata = sdcard.rdata;
/*
	if(fat.err){
		halt(0x33);
		rom_read_ok := 0b0;
	}
*/
	kb.ps2Clk = PS2_KBCLK;
	kb.ps2Data = PS2_KBDAT;

//	VGA_BLANKn = vga.dis_valid;
	VGA_HS = vga.h_sync;
	VGA_VS = vga.v_sync;
	alt{
		vga.win_valid : par{
			VGA_R_reg := dither_R.col_out;
			VGA_G_reg := dither_G.col_out;
			VGA_B_reg := dither_B.col_out;
		}
		vga.dis_valid : par{
			// SNES画面外の色（ディスプレイ自動幅調整のため）
			VGA_R_reg := 0x1;
			VGA_G_reg := 0x1;
			VGA_B_reg := 0x1;
		}
		else : par{
			VGA_R_reg := 0x0;
			VGA_G_reg := 0x0;
			VGA_B_reg := 0x0;
		}
	}
	VGA_R = VGA_R_reg;
	VGA_G = VGA_G_reg;
	VGA_B = VGA_B_reg;

	dither_R.col_in = dis.r_out;
	dither_G.col_in = dis.g_out;
	dither_B.col_in = dis.b_out;
	instruct vga.vsync par{
		dither_R.vsync();
		dither_G.vsync();
		dither_B.vsync();
	}
	instruct vga.hsync par{
		dither_R.hsync();
		dither_G.hsync();
		dither_B.hsync();
	}
	instruct vga.dsync par{
		dither_R.dsync();
		dither_G.dsync();
		dither_B.dsync();
	}

	reg_wr tas_key<12>, pad_data<12>;
	// SNESPAD<12> : BYｾﾚｽﾀ ↑↓←→ AXLR
	snes.pad1P =
		(keys[0x22] || keys[0x1B] || keys[0x29] || keys[0x5A] || 
		 keys[0x75] || keys[0x72] || keys[0x6B] || keys[0x74] || 
		 keys[0x23] || keys[0x24] || keys[0x2D] || keys[0x2C])
		| (btn_0||0b0||btn_3||btn_1||SW<3:0>||btn_2||0b000)
		| tas_key | pad_data;
	snes.pad2P = /*SW<8>*/0b0 || 0b00000000000; // for RockmanX2 testmode

//	snes.speed = usb.button1<12>;//pad.data_ref<0>;
//	snes.stop  = usb.button1<13>;//pad.data_ref<1>;
//	snes.for_DE1 = 0b0;
//	snes.dbg_set = SW<7:4>;
//	snes.f_hdma_disable = 0b0;//SW<8>;
//	snes.swt = SW<7:0>;
//	if(SW<8>) snes.sw_absidx_mem_off();

	any{
	//	KEY<3> : LEDG = 0b0 || snes.dbg<0> || 0b000 || snes.ist_out;
	//	KEY<1> : LEDG = 0b0 || apu.ir_out;
			// core / snes_core / mpu / dma / ppu1 / ppu2 / 0b0 / 0b000;
		/|h_code_reg | /|snes.f_halts | /|cart.halt_code : LEDR = (/|h_code_reg) || snes.f_halts || (/|cart.halt_code) || 0b00;
		else : LEDR = 
			(0b00|| 
			apu.disp_vold<0> || apu.disp_vold<1> || apu.disp_vold<2> || apu.disp_vold<3> ||
			apu.disp_vold<4> || apu.disp_vold<5> || apu.disp_vold<6> || apu.disp_vold<7>)
			| snes.pad1P<11:2>;
	}

	any{
		KEY<3> : ;//seg = apu.dbg || 0x0000;
	//	KEY<2> : seg = apu.halt_code || apu.ir_out || apu.pc_out;
		KEY<1> : seg = h_code_reg || snes.halt_code || cart.halt_code;
		else : alt{
			^rom_read_ok : seg = 0x00 || pA<22:11> || cart.save_ram_size;
			else : seg = snes.pc_out;
		//	else : seg = 0x00 || cart.dbg || snes.dbg;
		}
	}

	if((^rom_read_ok) & (^spc_read_ok)) apu.ready();
//	apu.mute = 0x00;//SW<10> || SW<11> || SW<12> || SW<13> || SW<14> || SW<15> || SW<16> || SW<17>;
//	apu.sw_intpl = 0b1;//^SW<9>;
//	apu.sw_echo_on = 0b1;

	// 音量確保のためにdac16を使う
	sel sound_L_clip<16>, sound_R_clip<16>;
	any{
		apu.sound_L<16:15>==0b10 : sound_L_clip = 0x8000;
		apu.sound_L<16:15>==0b01 : sound_L_clip = 0x7FFF;
		else                     : sound_L_clip = apu.sound_L<15:0>;
	}
	any{
		apu.sound_R<16:15>==0b10 : sound_R_clip = 0x8000;
		apu.sound_R<16:15>==0b01 : sound_R_clip = 0x7FFF;
		else                     : sound_R_clip = apu.sound_R<15:0>;
	}
	// 符号付きから符号なしに変換する
	dac_L.din = (^sound_L_clip<15>) || sound_L_clip<14:0>;
	dac_R.din = (^sound_R_clip<15>) || sound_R_clip<14:0>;
	Sound_Left  = dac_L.dout;
	Sound_Right = dac_R.dout;

//	snes.dbg_in = SW<7:4>;

	instruct halt h_code_reg := h_code;

	cart.sw_romtype = SW<9>;

	cart.A = snes.A;
	cart.BA = snes.BA;
	instruct snes.rom_read cart.read();
	snes.D_in = cart.Dout;
	snes.ROM_ACK = cart.ack;

	reg_wr rom_read_ack_wait;
	reg_wr sram_read_ack_wait;
	reg_wr wram_read_ack_wait;
	reg_wr aram_read_ack_wait, aram_write_ack_wait;

	instruct cart.rom_read par{
		sdram.read(0b000 || cart.rom_adrs);
		rom_read_ack_wait := 0b1;
	}
	if(rom_read_ack_wait & sdram.ack){
		rom_read_ack_wait := 0b0;
		cart.read_ack();
	}
	cart.rom_read_data = sdram.dout;

	instruct snes.rom_write cart.write();

	instruct cart.sram_read par{
		sdram.read(0b11000000 || cart.sram_adrs);
		sram_read_ack_wait := 0b1;
	}
	if(sram_read_ack_wait & sdram.ack){
		sram_read_ack_wait := 0b0;
		cart.read_ack();
	}
	cart.sram_read_data = sdram.dout;

	cart.Din = snes.D_out;
	instruct cart.sram_write par{
		sdram.write(0b11000000 || cart.sram_adrs, snes.D_out);
	}

	instruct snes.WRAM_RD par{
		wram.read(snes.WRAM_ADDR);
		wram_read_ack_wait := 0b1;
	}
	if(wram_read_ack_wait & sdram.ack){
		wram_read_ack_wait := 0b0;
		snes.WRAM_ACK();
	}
	snes.WRAM_Dout = wram.dout;

	instruct snes.WRAM_WE par{
		wram.write(snes.WRAM_ADDR, snes.WRAM_Din);
	}

	instruct snes.dram_refresh_go sdram.refresh_go();

	reg_wr vramA_ack;
	instruct snes.vramA_read par{
		vramA.read(snes.vramA_adrs);
		vramA_ack := 0b1;
	}
	snes.vramA_dout = vramA.dout;
	snes.vramA_ack = vramA_ack;
	if(vramA_ack) vramA_ack := 0b0;
	instruct snes.vramA_write par{
		vramA.write(snes.vramA_adrs, snes.vramA_din);
	}
	reg_wr vramB_ack;
	instruct snes.vramB_read par{
		vramB.read(snes.vramB_adrs);
		vramB_ack := 0b1;
	}
	snes.vramB_dout = vramB.dout;
	snes.vramB_ack = vramB_ack;
	if(vramB_ack) vramB_ack := 0b0;
	instruct snes.vramB_write par{
		vramB.write(snes.vramB_adrs, snes.vramB_din);
	}

	instruct snes.VIDEO_enable par{
		dis.write(snes.cB || snes.cG || snes.cR);
	}

	instruct snes.mod_apu_read par{
	//	generate mod_apu_read_stg.do();
		apu.io_read(snes.apu_A);
		snes.mod_apu_ack();
	}
	snes.apu_Din = apu.io_rport;

	instruct snes.mod_apu_write par{
	//	generate mod_apu_write_stg.do();
		apu.io_write(snes.apu_A, snes.apu_Dout); // for HDMA
	}

	instruct dds_cpu.run par{
		reg_wr dds_ppu_tim;
		if(dds_ppu_tim) dds_ppu_run();
		dds_ppu_tim := ^dds_ppu_tim;
	}

	// 1.024MHz
	instruct dds_apu.run par{
		// SPC700 core
		if(^apu.ready) apu.spc_run();

		// APUタイマ 64kHz
		reg_wr timer_timing<4>;
		timer_timing++;
		if(/&timer_timing){ // 16分周
			if(^apu.ready) apu.timer_run();
		}

		// DSP 128kHz (32kHz×4)
		reg_wr dsp_timing<3>;
		dsp_timing++;
		if(/&dsp_timing){ // 8分周
			if(^apu.ready) apu.dsp_run();
		}
	}

	instruct apu.mem_read_req par{
		apu_wram.read(apu.A);
		aram_read_ack_wait := 0b1;
	}
	if(aram_read_ack_wait | apu.ready){
		aram_read_ack_wait := 0b0;
		apu.ack();
	}
	apu.D_in = apu_wram.dout;

	instruct apu.mem_write_req par{
		apu_wram.write(apu.A, apu.D_out);
		aram_write_ack_wait := 0b1;
	}
	if(aram_write_ack_wait | apu.ready){
		aram_write_ack_wait := 0b0;
		apu.ack();
	}

	reg_wr clock25M_div;
	clock25M_div := ^clock25M_div;
	if(clock25M_div /*& rom_read_ok*/) vga.run();

	instruct vga.view dis.read();

	instruct vga.snes_hsync par{
		dis.bank_change();
		generate snes_line.do();
	}

	reg_wr mpu_timing<3>;
	if(rom_read_ok & dds_cpu.run){
		if(
		//	((snes.cpu_speed==3) & (mpu_timing==2)) | // 5.36931750MHz sw_dma_serial有効時のみ
			((snes.cpu_speed==2) & (mpu_timing==3)) | // 3.57954500MHz
			((snes.cpu_speed==1) & (mpu_timing==4)) | // 2.68465875MHz
			((snes.cpu_speed==0) & (mpu_timing==6))   // 1.78977250MHz
		){
			snes.mpu_run();
			mpu_timing := 1;
		}
		else mpu_timing++;
	}

	reg_wr f_reading_rom, f_reading_spc, f_reading_pad;

	instruct vjtag.recv par{
		// R(ROM), S(SPC), P(Pad)
		any{
			(^f_reading_rom) & (^f_reading_spc) & (^f_reading_pad) : par{
				if(vjtag.recv_data=='R') f_reading_rom := 0b1;
				if(vjtag.recv_data=='S') f_reading_spc := 0b1;
				if(vjtag.recv_data=='P') f_reading_pad := 0b1;
			}
			f_reading_rom : generate vjtag2ram_rom.do();
			f_reading_spc : generate vjtag2ram_spc.do();
			f_reading_pad : par{
				reg_wr st_pad;
				if(st_pad==0b0){
					pad_data := 0x0 || vjtag.recv_data;
					st_pad := 0b1;
				}
				if(st_pad==0b1){
					pad_data := vjtag.recv_data<3:0> || pad_data<7:0>;
					st_pad := 0b0;
					f_reading_pad := 0b0;
				}
			}
		}
	}

	stage snes_line {
		reg pixel_count<9> = 1;
		par{
			if(dds_ppu_run){

				snes.ppu_run();

				if(pixel_count==341){
					snes.hsync();
					pixel_count := 1;
					finish;
				}
				else pixel_count++;
			}
		}
	}

/*
	stage mod_apu_read_stg {
		par{
			snes.mod_apu_ack();
			finish;
		}
	}
*/

	stage key2btn {
		reg_ws push;
		par{
			if(kb.scanok) switch(kb.scancode){
				case 0xE0: ; // 無視
				case 0xF0: push := 0b0; // キー離す
				default: par{
					keys[kb.scancode<6:0>] := push;
					push := 0b1;
				}
			}
			if(0b0) finish;
		}
	}

	stage card2ram_rom {
		first_state st_init;
		state st_init if(fat.ack){// & ^sdram_clean.do){
			rom_read_ok := 0b0;
			spc_read_ok := 0b0;
			fat.fopen(0x0 || SW<3:0>);
			goto st_init2;
		}
		state st_init2 if(fat.ack){
			snes.soft_reset();
			apu.soft_reset();
			cart.init();
			fat.read();
			pA := 0;
			goto st_rrw;
		}
		state st_rrw if(fat.ack & sdram.ack){

			if((pA==0) & (fat.fdata=='S')){ // SPC
				generate card2ram_spc.do();
				goto st_init;
				finish;
			}

			sdram.write(pA, fat.fdata);
			if((pA&(0b11||0xFFFFE0))==0b00||0x007FC0) cart.check(0b0, pA<4:0>, fat.fdata);
			if((pA&(0b11||0xFFFFE0))==0b00||0x00FFC0) cart.check(0b1, pA<4:0>, fat.fdata);
			pA++;
			fat.read();

			if(/&pA<22:0>){
				cart.set_rom_type_8MB();
				goto st_end;
			}

			if(fat.eof) goto st_s1;
			else checksum += fat.fdata;
		}

		state st_s1 if(fat.ack){ // Read save data.
			fat.fopen((0x0||SW<3:0>)+1);
			pA := 0;
			goto st_s2;
		}
		state st_s2 if(fat.ack){
			fat.read();
			goto st_srw;
		}
		state st_srw if(fat.ack & sdram.ack){
			// 256kB
			sdram.write(0b11000000 || pA<17:0>, fat.fdata);
			pA++;
			fat.read();
			if(/&pA<17:0>) goto st_end;
		}

		state st_end par{
			generate mem_clean.do();
			finish;
		}
	}

	stage vjtag2ram_rom {
		reg recv_size<24>;
		first_state st_init;
		finish;
		state st_init par{
			rom_read_ok := 0b0;
			spc_read_ok := 0b0;
			recv_size := recv_size<23:8> || vjtag.recv_data;
		//	cart.set_rom_type(0);
			goto st_rs2;
		}
		state st_rs2 par{
			snes.soft_reset();
			apu.soft_reset();
			cart.init();
			recv_size := recv_size<23:16> || vjtag.recv_data || recv_size<7:0>;
			goto st_rs3;
		}
		state st_rs3 par{
			recv_size := vjtag.recv_data || recv_size<15:0>;
			pA := 0;
			goto st_rrecv;
		}
		state st_rrecv if(sdram.ack){
			sdram.write(pA, vjtag.recv_data);
			if((pA&(0b11||0xFFFFE0))==0b00||0x007FC0) cart.check(0b0, pA<4:0>, vjtag.recv_data);
			if((pA&(0b11||0xFFFFE0))==0b00||0x00FFC0) cart.check(0b1, pA<4:0>, vjtag.recv_data);
			pA++;

			if(/&pA<22:0>){
				cart.set_rom_type_8MB();
				goto st_ss1;
			}

			if(pA<22:0>==(recv_size-1)<22:0>) goto st_ss1;
		}

		state st_ss1 par{ // Receive save data.
			recv_size := recv_size<23:8> || vjtag.recv_data;
			goto st_ss2;
		}
		state st_ss2 par{
			recv_size := recv_size<23:16> || vjtag.recv_data || recv_size<7:0>;
			goto st_ss3;
		}
		state st_ss3 par{
			recv_size := vjtag.recv_data || recv_size<15:0>;
			pA := 0;
			goto st_srecv;
		}
		state st_srecv if(sdram.ack){
			// max 256kB
			sdram.write(0b11000000 || pA<17:0>, vjtag.recv_data);
			pA++;
			if(recv_size==0) goto st_end;
			if(pA<17:0>==(recv_size-1)<17:0>) goto st_end;
		}

		state st_end par{
			generate mem_clean.do();
			f_reading_rom := 0b0;
			goto st_init;
		}
	}

	stage mem_clean { // RAM Fill
		first_state st1;
		state st1 par{
			pA := 0;
			goto st2;
		}
		state st2 par{
			wram.write(pA<16:0>, 0x55);
			apu_wram.write(pA<15:0>, 0x00);
			pA++;
			if(/&pA<16:0>) goto st3;
		}
		state st3 par{
			rom_read_ok := 0b1;
		//	generate tas_stg.do();
			goto st1;
			finish;
		}
	}
/*
	stage sdram_clean {
		reg_wr cldA<20>;
		if(sdram.ack){
			sdram.write(0b00||cldA, 0x00000000, 0b1111);
			cldA++;
			if(/&cldA) finish;
		}
	}
*/
/*
	stage tas_stg {
		reg tas_file_type<3>;
		mem tas_buf[32];
		first_state st_open;
		state st_open if(fat.ack){
			fat.fopen((0x0||SW<3:0>)+1);
			goto st_type;
		}
		state st_type if(fat.ack){
			fat.read();
			if(fat.fdata=='['){ // bk2
				tas_file_type := 3;
				goto st_head;
			}
			if(fat.fdata=='v'){ // fm2
				tas_file_type := 4;
				goto st_head;
			}
		}
		state st_head if(fat.ack){
			fat.read();
			if(fat.fdata==0x0A){ // \n
				reg_wr lf_count<4>;
				if((tas_file_type==3) & (lf_count== 1)) goto st_input;
//				if((tas_file_type==3) & (lf_count== 4)) goto st_input;
				if((tas_file_type==4) & (lf_count==13)) goto st_input;
				lf_count++;
			}
		}
		state st_input if(fat.ack){
			reg_wr frame_count<8>, key_start;
			frame_count++;
			if(frame_count==0) key_start := 0b1;
			if(key_start){
				reg_wr buf_i<5>;
				tas_buf[buf_i] := fat.fdata!='.';
				fat.read();
				if(fat.fdata==0x0A){ // \n
					buf_i := 0;
					goto st_key;
				}
				else buf_i++;
			}
			else goto st_key;

			if(fat.eof) finish; // TAS end
		}
		state st_key if(vga.snes_vsync){
			// SNESPAD<12> : BYｾﾚｽﾀ ↑↓←→ AXLR
			if(tas_file_type==3){
				tas_key :=
					tas_buf[11] || // B
					tas_buf[10] || // Y
					tas_buf[ 8] || // Select
					tas_buf[ 9] || // Start
					tas_buf[ 4] || // Up
					tas_buf[ 5] || // Down
					tas_buf[ 6] || // Left
					tas_buf[ 7] || // Right
					tas_buf[13] || // A
					tas_buf[12] || // X
					tas_buf[14] || // L
					tas_buf[15];   // R
			}

			if(tas_file_type==4){
				tas_key :=
					tas_buf[ 3] || // Right
					tas_buf[ 4] || // Left
					tas_buf[ 5] || // Down
					tas_buf[ 6] || // Up
					tas_buf[ 7] || // Start
					tas_buf[ 8] || // Select
					tas_buf[ 9] || // B
					tas_buf[10];   // A
			}

			goto st_input;
		}
	}
*/
	// SPC read
	stage card2ram_spc {
		first_state st_open;
		state st_open if(fat.ack){
			spc_read_ok := 0b0;
			rom_read_ok := 0b0;
			apu.soft_reset();
			fat.fopen(SW<7:0>);
			pA := 0;
			goto st_spcr;
		}
		state st_spcr if(fat.ack){
			fat.read();
			goto st_spcw;
		}
		state st_spcw if(fat.ack){
			fat.read();
			// APUレジスタなど256バイトコピー
			// 0x20 - 0x2F -> 0xE0 - 0xEF
			if(pA<7:4>==0x2) apu.set_play(0xE || pA<3:0>, fat.fdata);
			if(/&pA<7:0>){
				pA := 0;
				goto st_memw;
			}
			else pA++;
		}
		state st_memw if(fat.ack){
			fat.read();
			// WRAMを0x10000(65536)バイトコピー
			// 0x00F0 - 0x00FF
			if(pA<15:4>==0x00F) apu.set_play(0xF || pA<3:0>, fat.fdata);
			// 0x0000 - 0xFFFF
			apu_wram.write(pA<15:0>, fat.fdata);
			pA++;
			if(/&pA<15:0>) goto st_dspw;
		}
		state st_dspw if(fat.ack){
			fat.read();
			// DSPレジスタなど128バイトコピー
			// 0x00 - 0x7F
			apu.set_play(0b0 || pA<6:0>, fat.fdata);
			pA++;
			if(/&pA<6:0>) goto st_end;
		}
		state st_end par{
			spc_read_ok := 0b1;
			goto st_open;
			finish;
		}
	}

	stage vjtag2ram_spc {
		first_state st_init;
		finish;
		state st_init par{
			spc_read_ok := 0b0;
			rom_read_ok := 0b0;
			apu.set_play(0x6C, 0x80); // key off
			apu.soft_reset();
			pA := 0;
			goto st_spcw;
		}
		state st_spcw par{
			// APUレジスタなど256バイトコピー
			// 0x20 - 0x2F -> 0xE0 - 0xEF
			if(pA<7:4>==0x2) apu.set_play(0xE || pA<3:0>, vjtag.recv_data);
			if(/&pA<7:0>){
				pA := 0;
				goto st_memw;
			}
			else pA++;
		}
		state st_memw par{
			// WRAMを0x10000(65536)バイトコピー
			// 0x00F0 - 0x00FF
			if(pA<15:4>==0x00F) apu.set_play(0xF || pA<3:0>, vjtag.recv_data);
			// 0x0000 - 0xFFFF
		//	sdram.write(0b000000||pA, 0x00||vjtag.recv_data);
			apu_wram.write(pA<15:0>, vjtag.recv_data);
			pA++;
			if(/&pA<15:0>) goto st_dspw;
		}
		state st_dspw par{
			// DSPレジスタなど128バイトコピー
			// 0x00 - 0x7F
			apu.set_play(pA<7:0>, vjtag.recv_data);
			pA++;
			if(/&pA<6:0>) goto st_end;
		}
		state st_end par{
			spc_read_ok := 0b1;
			f_reading_spc := 0b0;
			goto st_init;
		}
	}

}

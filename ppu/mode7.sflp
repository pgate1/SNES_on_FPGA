
%d VM_TILE 0b00
%d VM_CHR  0b01

%i "../fb2/mul_s16.h"

circuit mode7
{
	output vramA_adrs<15>;
	instrout vramA_read_req;
	input vramA_ack, vramA_dout<8>;
	output vramB_adrs<15>;
	instrout vramB_read_req;
	input vramB_ack, vramB_dout<8>;

	input scanline<8>; // unsigned
	input h_scroll<13>, v_scroll<13>; // signed

	input f_empspace, f_empfill;
	input f_v_flip, f_h_flip;
	input rotA<16>, rotB<16>, rotC<16>, rotD<16>; // signed
	input cX<13>, cY<13>; // signed

	input f_direct_color, f_ExtBG;

	output col_enable, col_id<8>;
	output dir_col<15>;
	output ext_col_en, ext_col_id<8>, ext_pri;

	instrin hsync, tile_read, chr_read;
	output dbg;

	instrself vramA_read(vramA_adrs);
	instrself vramB_read(vramB_adrs);

	instrin line_init;

	// tile adrs
	reg px<22>, py<22>;
	mul_s16 mulx, muly;
	reg mx_t<3>, my_t<3>;
	reg px_t<4>, py_t<4>;

	reg tile_data<8>;
	reg chr_data<8>;

	stage_name line_init_stage { task do(); }
	stage_name readA_wait { task do(); }
	stage_name readB_wait { task do(); }

	sel dy<8>;
	if(f_v_flip) dy = ^scanline;
	else         dy =  scanline;

	sel sxc<14>, syc<14>;
	// <s14> = <s13> - <s13>
	sxc = (14#h_scroll) - (14#cX);
	syc = (14#v_scroll) - (14#cY);

	// RPGツクール2、キャッツラン
	// CLIP(a) (((a)&0x2000)?((a)|~0x3FF):((a)&0x3FF))
	sel sx<11>, sy<11>;
	sx = sxc<13> || sxc<9:0>;
	sy = syc<13> || syc<9:0>;

	// 8bit固定少数点から整数に変換
	sel mx<10>, my<10>;
	mx = px<17:8>; // 10bit
	my = py<17:8>;

	col_enable = chr_data!=0x00;

	if(f_direct_color){
		dir_col = 
			chr_data<7:6> || 0b000 ||
			chr_data<5:3> || 0b00 ||
			chr_data<2:0> || 0b00;
	}
	else{
		col_id = chr_data;
	}

	// 拡張BGモード
	if(f_ExtBG){
		ext_col_id = 0b0 || col_id<6:0>;
		ext_pri = col_id<7>;
	}
	else{
		ext_col_id = 0x00;
		ext_pri = 0b0;
	}
	ext_col_en = ext_col_id!=0x00;

//dbg = dbg_reg;

	instruct hsync par{
		;
	}

	instruct vramA_read par{
		vramA_read_req();
		generate readA_wait.do();
	}

	instruct vramB_read par{
		vramB_read_req();
		generate readB_wait.do();
	}

	// 初期値
	instruct line_init par{
		generate line_init_stage.do();
	}

	// x-2
	instruct tile_read par{
		sel tile_adrs<15>;
		tile_adrs = 0b0 || my<9:3> || mx<9:3>;
		vramA_read(tile_adrs);

		mx_t := mx<2:0>;
		my_t := my<2:0>;
		px_t := px<21:18>;
		py_t := py<21:18>;

		if(f_h_flip){
			px -= (22#rotA);
			py -= (22#rotC);
		}
		else{
			px += (22#rotA);
			py += (22#rotC);
		}
	}

	// x-1
	instruct chr_read par{
		sel chr_adrs<15>;
		chr_adrs = 0b0 || tile_data || my_t || mx_t;

		if(f_empspace & (/|px_t | /|py_t)){ // 領域外
			if(f_empfill) vramB_read(15#0b0); // char 0
			else chr_data := 0x00; // 透過
		}
		else vramB_read(chr_adrs);
	}

	stage line_init_stage {
		first_state st1;
		state st1 par{
			// <s16> * <s14>
			px := mulx.con(rotA, 16#sx).dout<21:6> || 0b000000;
			py := muly.con(rotC, 16#sx).dout<21:6> || 0b000000;
			goto st2;
		}
		state st2 par{
			// <s16> * <8>
			px += (mulx.con(rotB, 0x00||dy).dout<21:6> || 0b000000);
			py += (muly.con(rotD, 0x00||dy).dout<21:6> || 0b000000);
			goto st3;
		}
		state st3 par{
			// <s16> * <s14>
			px += (mulx.con(rotB, 16#sy).dout<21:6> || 0b000000);
			py += (muly.con(rotD, 16#sy).dout<21:6> || 0b000000);
			goto st4;
		}
		state st4 par{
			// <22> = 14#<s13> || <8>
			px += ((14#cX) || 0x00);
			py += ((14#cY) || 0x00);
			if(f_h_flip) goto st5;
			else{ goto st1; finish; }
		}
		state st5 par{
			// px<22> rotA<16>*255
			px += (mulx.con(rotA, 0x00FF).dout<21:0>);
			py += (muly.con(rotC, 0x00FF).dout<21:0>);
			goto st1;
			finish;
		}
	}

	stage readA_wait {
		if(vramA_ack){
			tile_data := vramA_dout; // vram.D_out<7:0>
			finish;
		}
	}

	stage readB_wait {
		if(vramB_ack){
			chr_data := vramB_dout; // vram.D_out<15:8>
			finish;
		}
	}

}


%i "../fb2/mul_u5.h"

circuit colormath
{
	input fi_screen_math, f_subscreen_math, fi_sub_col_id;
	input main_col<5>, sub_col<5>, fix_col<5>;
	input f_colmath_op, f_half_colmath;
	instrin precon(fi_screen_math, f_subscreen_math, fi_sub_col_id);
	instrin postcon(f_colmath_op, f_half_colmath);
	instrin colcon(main_col, sub_col, fix_col);
	output col_out<5>;

	input n_brightness<4>, col_in<5>;
	instrin bright(n_brightness, col_in);
	mul_u5 mul_bright;
	output dout<5>;

	sel s_c<5>;
	if(f_subscreen_math & fi_sub_col_id){
		s_c = sub_col;
	}
	else{
		s_c = fix_col;
	}

	sel op_c<6>, math_c<6>;
	if(f_colmath_op){ // Minus
		op_c = (0b0 || main_col) - (0b0 || s_c);
		if(op_c<5>) math_c = 0b000000;
		else math_c = op_c;
	}
	else{ // Plus
		op_c = (0b0 || main_col) + (0b0 || s_c);
		math_c = op_c;
	}

	sel post_c<5>;
	if(f_half_colmath & (fi_sub_col_id | ^f_subscreen_math)){
		post_c = math_c<5:1>;
	}
	else{
		if(math_c<5>) post_c = 0b11111;
		else post_c = math_c<4:0>;
	}

	if(fi_screen_math){
		col_out = post_c;
	}
	else{
		col_out = main_col;
	}

	instruct bright par{
	//	if(n_brightness==0x0) dout = 0b00000; // ‚±‚ê‚Íppu1_core‚Å‚â‚Á‚Ä‚é
		dout = mul_bright.con(col_in, (0b0||n_brightness)+1).dout<8:4>;
	}
}
